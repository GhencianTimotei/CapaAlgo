/*!
 * \defgroup MOD_SERV_OS (Os_Types.h)
 * \{
 ******************************************************************************
 * \image html "Kopf_oZusatz_A4hoch_4C.jpg"
 *
 * \par Module Owner:
 * Huf Group
 *
 * \par Initial Project:
 * 1656.001 BSW
 *
 ******************************************************************************
 * \par Description:
 * Header file for OS module. Contains the definitions of all types used by OS.
 *
 ******************************************************************************
 *
 * %PCMS_HEADER_SUBSTITUTION_START:%
 *
 * Configuration Management Information Log (generated by Dimensions CM)
 *
 *
 * CM Item: %PID:%
 * Item name: %PM:%
 * Location: %ARCHIVE:%
 * Revision: %PR:%
 * Date: %DATE:%
 * Author: %AUTHOR:%
 *
 * %PCMS_HEADER_SUBSTITUTION_END:% *
 ******************************************************************************
 *
 * \par Layer:
 * Operating System, Service Layer
 *
 * \par Compiler dialect:
 * C99
 *
 * \par Controller:
 * Independent
 *
 * \par Estimated resources:
 * | Resource | Amount   | Remarks         |
 * | ---------| -------- | ----------------|
 * | ROM      | x Byte   | on x controller |
 * | RAM      | y Byte   | on x controller |
 * | NVRAM    | z Byte   | on x controller |
 * | Runtime Init | X ms |                 |
 * | Runtime Task | X ms |                 |
 *
 ******************************************************************************/
#ifndef OS_TYPES_H_							/* To avoid double inclusion */
#define OS_TYPES_H_

/*[SWPS_SWS_SERVOS_00001]*/
#include "Std_Types.h"
#include "Os_TypesCfg.h"

/* Macro for task definition, this macro has to be used in each task prototype function */
/* polyspace +2 MISRA-C3:D4.9 [Not a defect:Unset] "Macros used to facilitate an easier adaptation" */
/* polyspace +1 MISRA-C3:20.10 [Not a defect:Unset] "Just one single ## operator is used. Result is predictable." */
#define TASK(TaskName) void TaskName##func(void)
/* BCC1(only basic tasks, limited to one activation request per task and one task per priority, while all tasks have different priorities)*/
/* polyspace +3 MISRA-C3:2.5 [Not a defect:Unset] "Macro used into different configuration" */
#define BCC1      0x01u
/* BCC2(like BCC1, plus more than one task per priority possible and multiple requesting of task activation allowed)*/
#define BCC2      0x02u

/*Constant values for Os_StatusType (see OSEK binding specification) */
/*
0           E_OK
1 to 31     OSEK OS error codes
32 to 63    OSEK COM error codes
64 to 95    OSEK NM error codes
96 to 127   OSEKtime OS error codes
128 to 159  OSEKtime FTCom error codes
160 to 255  OSEK RESERVED
 */
#ifndef E_OK
#define E_OK 0x00u
#endif
/*[SWPS_SWS_SERVOS_00023]*/
/*All errors of API services*/
#define E_OS_ACCESS           0x01u
#define E_OS_CALLEVEL         0x02u
#define E_OS_ID               0x03u
#define E_OS_LIMIT            0x04u
#define E_OS_NOFUNC           0x05u
#define E_OS_RESOURCE         0x06u
#define E_OS_STATE            0x07u
#define E_OS_VALUE            0x08u
#define E_OS_PARAM_POINTER    0x0Bu

/*Internal errors of the operating system*/
#define E_OS_SYS_MTA          0x09u /* Multiple task activation*/
#define E_OS_SYS_TSK_Q_FULL   0x0Au /* Task queue is full*/

/*Constant values for TaskStateType*/
#define RUNNING               0x01u
/*#define WAITING             0x02u*/
#define READY                 0x03u
#define SUSPENDED             0x04u
#define INVALID_TASK          0xFFu

/*Constant values for TaskScheduling*/
#define NON_PREEMPTIVE        0x0u
/*#define PREEMPTIVE          0x01u*/

/*Constant values for AppModeType*/
#define OSDEFAULTAPPMODE  0x00u

typedef U8 Os_StatusType; /*[SWPS_SWS_SERVOS_00026]*/

/* polyspace +2 MISRA-C3:2.3 [Not a defect:Unset] "Types used into different configurations or for future use." */
typedef U8 CounterType;          /* Counter ID. [SWPS_SWS_SERVOS_00027]*/
typedef U8 ISRType;      /*[SWPS_SWS_SERVOS_00042]*/
typedef TickType *TickRefType;   /* Reference type for the counter which is incremented every OS tick [SWPS_SWS_SERVOS_00025], [SWPS_SWS_SERVOS_00028]*/
typedef U8 TaskType;             /* This data type identifies a task. [SWPS_SWS_SERVOS_00029]*/
typedef TaskType * TaskRefType;  /* This data type points to a variable of TaskType. [SWPS_SWS_SERVOS_00153]*/
typedef U8 TaskStateType;        /* This data type identifies the state of a task.[SWPS_SWS_SERVOS_00030]*/
typedef TaskStateType * TaskStateRefType; /*This data type points to a variable of the data type TaskStateType. [SWPS_SWS_SERVOS_00031]*/

/*Task scheduling*/
typedef U8 TaskScheduling; /* [SWPS_SWS_SERVOS_00032]*/
typedef U8 OS_AlarmType;   /* This data type identifies an alarm. [SWPS_SWS_SERVOS_00033]*/
typedef Os_CounterType Os_AlarmExpirationType; /*[SWPS_SWS_SERVOS_00025], [SWPS_SWS_SERVOS_00034]*/
typedef U8 ResourceType; /*[SWPS_SWS_SERVOS_00041]*/
typedef U8 AppModeType;  /*[SWPS_SWS_SERVOS_00043]*/

typedef struct
{
   Os_CounterType counterPreviousVal;
   Os_CounterType counterCurrentVal;
   boolean initialCyclePassed;
   U8 alarmExpirationCnt; /*No of times the alarm has expired; Decremented when associated task is enqueued */
}Os_CyclicAlarmRunDataType; /*[SWPS_SWS_SERVOS_00035]*/

typedef struct
{
   Os_CounterType volatile *counterRef; /*Counter which is assigned to the alarm*/
   Os_AlarmExpirationType cycleTime;
   Os_AlarmExpirationType initialCycleTime;
   TaskType taskID;
}Os_CyclicAlarmCfgDataType; /*[SWPS_SWS_SERVOS_00036]*/

typedef struct
{
   CONSTP2FUNC(void, GLOBAL_POINTER, functionPointer)(void);
   U8 priority; /* Task priority */
   U8 prioIndex; /* Index of the priority in the sorted priority list */
   TaskScheduling scheduling; /* Preemptive/Non preemptive */
   U8 noAllowedActivations; /* Number of allowed activations [SWPS_SWS_SERVOS_00120]*/
   OS_AlarmType alarmID; /* Associated alarm ID */
}Os_TaskCfgDataType; /*[SWPS_SWS_SERVOS_00037]*/

typedef struct
{
   TaskStateType taskState; /* Task state */
   U8 queueEntryNo; /* Number of queue entries for this task */
}OS_TaskRunDataType; /*[SWPS_SWS_SERVOS_00038]*/

/* polyspace-begin MISRA-C3:2.3 [Not a defect:Unset] " Types used into different configurations." */
typedef struct
{
   CONSTP2FUNC(void, GLOBAL_POINTER, AlarmCallback_PFUNC)(void);  /*Pointer to the callback function which is called when the alarm expires */
   Os_CounterType volatile *AlarmCounterRef; /*Counter which is assigned to the alarm*/
}Os_SingleAlarmCfgDataType; /*[SWPS_SWS_SERVOS_00039]*/

typedef struct
{
   Os_AlarmExpirationType AlarmExpirationTimeInTicks;
   Os_CounterType counterPreviousVal;
   BOOL AlarmIsRunning_BO;   /*flag used to store if an alarm has started or not*/
}Os_SingleAlarmRunDataType;  /*[SWPS_SWS_SERVOS_00040]*/

/* polyspace-end MISRA-C3:2.3 [Not a defect:Unset] " Types used into different configurations." */
#endif /* OS_TYPES_H_ */

/* %PCMS_HEADER_SUBSTITUTION_START:%
 ******************************************************************************
 * Document Management Information Log (generated by Dimensions CM)
 *
 * Description:
 * %PD:%
 *
 * Used by Baselines:
 * %PIRB:%
 *
 * Used by Dimensions CM Projects:
 * %PIRW:%
 *
 * Change History:
 * %PL:%
 *
 * %PCMS_HEADER_SUBSTITUTION_END:%
 */
