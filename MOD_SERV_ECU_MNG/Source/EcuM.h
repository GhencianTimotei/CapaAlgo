/*
 ******************************************************************************
 * \image html "Kopf_oZusatz_A4hoch_4C.jpg"
 *
 * \par Module Owner:
 *   Huf Huelsbeck & Fuerst GmbH & Co. KG \n
 *   Steeger Str. 17 \n
 *   42551 Velbert \n
 *   Department PDE-S
 *
 ******************************************************************************
 * \par Description:
 *  Header file for Ecu Manager service
 *  Implementation based on Autosar 4.2 specifications   \n
 *
 * %PCMS_HEADER_SUBSTITUTION_START:%
 ******************************************************************************
 * Document Management Information Log (generated by Dimensions CM)
 *
 *
 *  CM Item:   %PID:%
 *  Itemname:  %PM:%
 *  Location:  %ARCHIVE:%
 *  Revision:  %PR:%
 *  Date:      %DATE:%
 *  Author:    %AUTHOR:%
 *
 * %PCMS_HEADER_SUBSTITUTION_END:%
 *
 ******************************************************************************/

/* [SWS_EcuM_00991] */
/* [SWS_EcuM_00676] */

#ifndef  ECUM_H_                /* To avoid double inclusion */
#define  ECUM_H_

#include "Std_Types.h"
#include "EcuM_Cbk.h"
#include "EcuM_Cfg.h"
#include "EcuM_Generated_Types.h"

/* polyspace-begin MISRA-C3:2.5 [Not a defect:Unset] "Macro defined according to Autosar but this functionality is not implemented for this release or it is used into different configurations " */
/* vendor and module identification */
# define ECUM_VENDOR_ID                                               (1u)
# define ECUM_MODULE_ID                                               (1u)

/* Component Version Information */
# define ECUM_SW_MAJOR_VERSION                                        (0x01u)
# define ECUM_SW_MINOR_VERSION                                        (0x01u)
# define ECUM_SW_PATCH_VERSION                                        (0x00u)

/* EcuM error codes */
#define ECUM_E_MULTIPLE_RUN_REQUESTS       (0x01u) /* multiple RUN/POST-RUN requests by the same user ID */
#define ECUM_E_MISMATCHED_RUN_RELEASE      (0x02u) /* releasing a RUN/POST-RUN without a matching request */
#define ECUM_E_ALL_RUN_REQUESTS_KILLED     (0x03u) /* EcuM_KillAllRUNRequests was invoked */
#define ECUM_E_INVALID_PARAMETER           (0x04u) /* wrong parameter for function call */
#define ECUM_E_MODULE_NOT_IN_PROPER_STATE  (0x05u) /* EcuM is not in the state that supports the function call */
#define ECUM_E_NULL_POINTER                (0x06u) /* the received parameter is a NULL pointer */
#define ECUM_E_UNKNOWN_WAKEUP_SOURCE       (0x07u) /* the wake up source that sets the wakeup event is unknown */
#define ECUM_E_UNKNOWN_WAKEUP_REACTION     (0x08u) /* the returned wake up reaction is not known by EcuM */
#define ECUM_E_SWITCH_OFF_ERROR            (0x09u) /* Switch OFF had returned - this should never happen, user need to implement EcuM_AL_SwitchOff() in a proper way */

/* EcuM states and sub-states. States are encoded in the high-nibble, sub-state in the low-nibble */
typedef U8 EcuM_StateType;

/* [SWS_EcuMf_00047] */
/* [SWS_EcuM_00507] */
/* [SWS_EcuM_02664] */
#define ECUM_SUBSTATE_MASK                (EcuM_StateType) (0x0Fu)
#define ECUM_STATE_STARTUP                (EcuM_StateType) (0x10u)
#define ECUM_STATE_STARTUP_ONE            (EcuM_StateType) (0x11u)
#define ECUM_STATE_STARTUP_TWO            (EcuM_StateType) (0x12u)
#define ECUM_STATE_WAKEUP                 (EcuM_StateType) (0x20u)
#define ECUM_STATE_WAKEUP_ONE             (EcuM_StateType) (0x21u)
#define ECUM_STATE_WAKEUP_VALIDATION      (EcuM_StateType) (0x22u)
#define ECUM_STATE_WAKEUP_REACTION        (EcuM_StateType) (0x23u)
#define ECUM_STATE_WAKEUP_TWO             (EcuM_StateType) (0x24u)
#define ECUM_STATE_WAKEUP_WAKESLEEP       (EcuM_StateType) (0x25u)
#define ECUM_STATE_WAKEUP_TTII            (EcuM_StateType) (0x26u)
#define ECUM_STATE_RUN                    (EcuM_StateType) (0x30u)
#define ECUM_STATE_APP_RUN                (EcuM_StateType) (0x32u)
#define ECUM_STATE_APP_POST_RUN           (EcuM_StateType) (0x33u)
#define ECUM_STATE_SHUTDOWN               (EcuM_StateType) (0x40u)
#define ECUM_STATE_PREP_SHUTDOWN          (EcuM_StateType) (0x44u)
#define ECUM_STATE_GO_SLEEP               (EcuM_StateType) (0x49u)
#define ECUM_STATE_GO_OFF_ONE             (EcuM_StateType) (0x4Du)
#define ECUM_STATE_GO_OFF_TWO             (EcuM_StateType) (0x4Eu)
#define ECUM_STATE_SLEEP                  (EcuM_StateType) (0x50u)
#define ECUM_STATE_OFF                    (EcuM_StateType) (0x80u)
#define ECUM_STATE_RESET                  (EcuM_StateType) (0x90u)

/* [SWS_EcuMf_00050] */
/* Describes the possible states of a wake up source */
typedef U8 EcuM_WakeupStatusType;

#define ECUM_WKSTATUS_NONE              (EcuM_WakeupStatusType) (0u)
#define ECUM_WKSTATUS_PENDING           (EcuM_WakeupStatusType) (1u)
#define ECUM_WKSTATUS_VALIDATED         (EcuM_WakeupStatusType) (2u)
#define ECUM_WKSTATUS_EXPIRED           (EcuM_WakeupStatusType) (3u)
#define ECUM_WKSTATUS_ENABLED           (EcuM_WakeupStatusType) (6u)

/* [BSW_SWS_EcuM_00004] */
/* added just for compatibility with Vector BswM */
/* polyspace +1 MISRA-C3:2.3 [Not a defect:Unset] "Type added for compatibility with Vector BswM, it is used when Vector BswM module is integrated" */
typedef EcuM_WakeupStatusType EcuM_WakeupStateType;

/* [BSW_SWS_EcuM_00003] */
/* added just for compatibility with Vector BswM */
/* polyspace +1 MISRA-C3:2.3 [Not a defect:Unset] "Type added for compatibility with Vector BswM, it is used when Vector BswM module is integrated" */
typedef U8 EcuM_RunStatusType;

/* added just for compatibility with Vector BswM */
/* Range of EcuM RunStatus Types */
#define ECUM_RUNSTATUS_UNKNOWN          (EcuM_RunStatusType) (0u)
#define ECUM_RUNSTATUS_REQUESTED        (EcuM_RunStatusType) (1u)
#define ECUM_RUNSTATUS_RELEASED         (EcuM_RunStatusType) (2u)

/* boot targets the ECU Manager module */
/*typedef U8 EcuM_BootTargetType;*/

/*
#define ECUM_BOOT_TARGET_APP                 (EcuM_BootTargetType) (0u)
#define ECUM_BOOT_TARGET_OEM_BOOTLOADER      (EcuM_BootTargetType) (1u)
#define ECUM_BOOT_TARGET_SYS_BOOTLOADER      (EcuM_BootTargetType) (2u)
*/

/* [SWS_EcuMf_00051] */
/* describes the possible outcomes of the WAKEUP REACTION state */
typedef U8 EcuM_WakeupReactionType;
/* wake up reaction states */
#define ECUM_WKACT_RUN          (EcuM_WakeupReactionType) (0u)
#define ECUM_WKACT_TTII         (EcuM_WakeupReactionType) (2u)
#define ECUM_WKACT_SHUTDOWN     (EcuM_WakeupReactionType) (3u)

#define ECUM_NO_VALIDATION_TIMEOUT   (U8)(0u)

#define ECUM_TRUE    (BOOL)TRUE
#define ECUM_FALSE   (BOOL)FALSE
/* polyspace-end MISRA-C3:2.5 [Not a defect:Unset] "Macro defined according to Autosar but this functionality is not implemented for this release or it is used into different configurations " */

/* [BSW_SWS_EcuMf_00104] */
typedef enum
{
   ECUM_UNINITIALIZED,
   ECUM_POST_RUN,
   ECUM_RUN,
   ECUM_SHUTDOWN,
   ECUM_SLEEP,
   ECUM_STARTUP,
   ECUM_WAKE_SLEEP
}EcuM_ModeType;

/* polyspace-begin MISRA-C3:5.1 [Justified:Unset] "C99 standard is used to compile, Autosar naming convention." */
#if(ECUM_VERSION_INFO_API_ENABLED == STD_ON)
/*!
 ******************************************************************************
 * \brief
 * Returns the version information of this module.
 *
 * \details
 * If ECUM_DEV_ERROR_DETECT_ENABLED is STD_ON and versioninfo is a NULL pointer,
 * ECUM_E_NULL_POINTER error will be send to DET
 *
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]     versioninfo - Pointer to where to store the version information of this module.
 * \param[in]      void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns        void
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern void EcuM_GetVersionInfo(Std_VersionInfoType* versioninfo);
#endif

/*!
 ******************************************************************************
 * \brief
 * Initializes the ECU state manager and carries out the startup procedure.
 *
 * \details
 * If the wakeup was validated the execution will continue with RUN state otherwise
 * it will continue with WAKEUP VALIDATION state
 *
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]     void
 * \param[in]      void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns        void
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern void EcuM_Init(void);

/*!
 ******************************************************************************
 * \brief
 * Typically called from the shutdown hook, this function takes over execution
 * control and will carry out GO OFF II activities.
 *
 * \details
 * It executes the GO OFF II activities depending of the selected shutdown target
 * (reset or switch off)
 * If a wakeup event is detected during this state the shutdown target will be changed
 * to reset
 *
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]     void
 * \param[in]      void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns        void
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
/* polyspace+1 MISRA-C3:D4.5 [Justified:Low] "No overlapping visibility" */
extern void EcuM_Shutdown(void);

/*!
 ******************************************************************************
 * \brief
 * Places a request for the RUN state. Requests can be placed by every user made
 * known to the state manager at configuration time.
 *
 * \details
 * If KillAllRunRequests is in progress EcuM does not accept any new request
 * and returns E_NOT_OK unless the resulting shutdown has been completed
 * If ECUM_DEV_ERROR_DETECT_ENABLED is set to STD_ON it returns E_NOT_OK
 * and sends errors to DET in next cases:
 * ECUM_E_INVALID_PARAMETER - if the user is not in the EcuM users list,
 * ECUM_E_MULTIPLE_RUN_REQUESTS - on multiple requests by the same user ID
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     user - ID of the entity requesting the RUN state
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       Std_ReturnType:
                  E_OK: The request was accepted by EcuM
                  E_NOT_OK: The request was not accepted by EcuM
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
/* polyspace+1 MISRA-C3:D4.5 [Justified:Low] "No overlapping visibility" */
extern Std_ReturnType EcuM_RequestRUN(EcuM_UserType user);

/*!
 ******************************************************************************
 * \brief
 * Releases a RUN request previously done with a call to EcuM_RequestRUN
 *
 * \details
 * If ECUM_DEV_ERROR_DETECT_ENABLED is set to STD_ON it returns E_NOT_OK
 * and sends errors to DET in next cases:
 * ECUM_E_INVALID_PARAMETER - if the user is not in the EcuM users list,
 * ECUM_E_MISMATCHED_RUN_RELEASE - on releasing without a matching request
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     user - ID of the entity releasing the RUN state
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       Std_ReturnType:
                  E_OK: The request was accepted by EcuM
                  E_NOT_OK: The request was not accepted by EcuM
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
/* polyspace+1 MISRA-C3:D4.5 [Justified:Low] "No overlapping visibility" */
extern Std_ReturnType EcuM_ReleaseRUN(EcuM_UserType user);

/*!
 ******************************************************************************
 * \brief
 * Places a request for the POST RUN state. Requests can be placed by every user made
 * known to the state manager at configuration time.
 *
 * \details
 * The POST_RUN state can be requested by software components to indicate that they
 * need to execute cleanup or saving activities before the ECU goes to sleep.
 * If KillAllPostRunRequests is in progress EcuM does not accept any new request
 * and returns E_NOT_OK unless the resulting shutdown has been completed
 * If ECUM_DEV_ERROR_DETECT_ENABLED is set to STD_ON it returns E_NOT_OK
 * and sends errors to DET in next cases:
 * ECUM_E_INVALID_PARAMETER - if the user is not in the EcuM users list,
 * ECUM_E_MULTIPLE_RUN_REQUESTS - on multiple requests by the same user ID
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     user - ID of the entity requesting the POST RUN state
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       Std_ReturnType:
                  E_OK: The request was accepted by EcuM
                  E_NOT_OK: The request was not accepted by EcuM
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
/* polyspace+1 MISRA-C3:D4.5 [Justified:Low] "No overlapping visibility" */
extern Std_ReturnType EcuM_RequestPOST_RUN(EcuM_UserType user);

/*!
 ******************************************************************************
 * \brief
 * Releases a POST RUN request previously done with a call to EcuM_RequestPOST_RUN
 *
 * \details
 * If ECUM_DEV_ERROR_DETECT_ENABLED is set to STD_ON it returns E_NOT_OK
 * and sends errors to DET in next cases:
 * ECUM_E_INVALID_PARAMETER - if the user is not in the EcuM users list,
 * ECUM_E_MISMATCHED_RUN_RELEASE - on releasing without a matching request
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     user - ID of the entity releasing the POST RUN state
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       Std_ReturnType:
                  E_OK: The request was accepted by EcuM
                  E_NOT_OK: The request was not accepted by EcuM
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
/* polyspace+1 MISRA-C3:D4.5 [Justified:Low] "No overlapping visibility" */
extern Std_ReturnType EcuM_ReleasePOST_RUN(EcuM_UserType user);

/*!
 ******************************************************************************
 * \brief
 * The function unconditionally clears all requests to RUN.
 *
 * \details
 *  As an effect the ECU State Manager switches to RUN III (POST RUN) state which
 *  allows for a controlled shutdown and does not accept any new Run request unless
 *  the resulting shutdown has been completed.
 *  If this function is called ECUM_E_ALL_RUN_REQUESTS_KILLED error will be send to DET.
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       Std_ReturnType:
                  E_OK: The request was accepted by EcuM
                  E_NOT_OK: The request was not accepted by EcuM
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern void EcuM_KillAllRUNRequests(void);

/*!
 ******************************************************************************
 * \brief
 * The function unconditionally clears all requests to POST RUN.
 *
 * \details
 *  As an effect the ECU State Manager does not accept any new Post Run request unless
 *  the resulting shutdown has been completed.
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       Std_ReturnType:
                  E_OK: The request was accepted by EcuM
                  E_NOT_OK: The request was not accepted by EcuM
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern void EcuM_KillAllPostRUNRequests(void);

/*!
 ******************************************************************************
 * \brief
 * Selects the shutdown target.
 *
 * \details
 *  Only the following subset of the EcuM_StateType value range is accepted for parameter target:
 * -   ECUM_STATE_SLEEP
 * -   ECUM_STATE_RESET
 * -   ECUM_STATE_OFF
 * All other values will be rejected and ECUM_E_INVALID_PARAMETER will be send to DET.
 * EcuM_SelectShutdownTarget shall not be called in ECUM_STATE_SHUTDOWN sub states,
 * ECUM_STATE_SLEEP, ECUM_STATE_OFF and ECUM_STATE_RESET because the shutdown target will not be set,
 * an error will be generated and ECUM_E_MODULE_NOT_IN_PROPER_STATE will be send to DET.
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     target - The selected shutdown target.
 *                EcuM_NewSleepMode_U8 - The identifier of a sleep mode as defined by configuration (if target is
 *                ECUM_STATE_SLEEP) or ECUM_UNUSED_SLEEP_MODE (if target is ECUM_STATE_RESET or ECUM_STATE_OFF)
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       Std_ReturnType:
                  E_OK: The new shutdown target was set
                  E_NOT_OK: The new shutdown target was not set
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern Std_ReturnType EcuM_SelectShutdownTarget(EcuM_StateType target, U8 EcuM_NewSleepMode_U8);

/*!
 ******************************************************************************
 * \brief
 * Returns the currently selected shutdown target as set by EcuM_SelectShutdownTarget.
 *
 * \details
 *  If a NULL pointer is being passed as parameter ECUM_E_NULL_POINTER will be send to DET.
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    shutdowntarget - One of these values is returned:
 *                ECUM_STATE_SLEEP, ECUM_STATE_RESET, ECUM_STATE_OFF
 *                sleepmode - If the out parameter "shutdowntarget" is
 *                ECUM_STATE_SLEEP, sleepmode tells which of the
 *                configured sleep modes was actually chosen, in all the others
 *                cases its value will be 0xFF (ECUM_UNUSED_SLEEP_MODE)
 * \param[in]     void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       Std_ReturnType:
                  E_OK: The service has succeeded
                  E_NOT_OK: The service has failed due to NULL pointer being passed
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern Std_ReturnType EcuM_GetShutdownTarget(EcuM_StateType* shutdownTarget, U8* sleepMode);

/*!
 ******************************************************************************
 * \brief
 * Returns the shutdown target of the previous shutdown process.
 *
 * \details
 *  The return value describes the ECU state from which the last wake up or
 *  power up occurred. This function returns always the same value until the
 *  next shutdown. If a NULL pointer is being passed as parameter ECUM_E_NULL_POINTER
 *  will be send to DET.
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    shutdowntarget - One of these values is returned:
 *                ECUM_STATE_SLEEP, ECUM_STATE_RESET, ECUM_STATE_OFF
 *                sleepmode - If the out parameter "shutdowntarget" is
 *                ECUM_STATE_SLEEP, sleepmode tells which of the
 *                configured sleep modes was actually chosen, in all the others
 *                cases its value will be 0xFF (ECUM_UNUSED_SLEEP_MODE)
 * \param[in]     void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       Std_ReturnType:
                  E_OK: The service has succeeded
                  E_NOT_OK: The service has failed due to NULL pointer being passed
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern Std_ReturnType EcuM_GetLastShutdownTarget(EcuM_StateType* shutdownTarget, U8* sleepMode);

/*!
 ******************************************************************************
 * \brief
 * Returns the internal state of EcuM.
 *
 * \details
 *  Possible states are: ECUM_STATE_STARTUP, ECUM_STATE_STARTUP_ONE,  ECUM_STATE_STARTUP_TWO,
 *  ECUM_STATE_APP_RUN, ECUM_STATE_APP_POST_RUN, ECUM_STATE_PREP_SHUTDOWN, ECUM_STATE_GO_SLEEP,
 *  ECUM_STATE_GO_OFF_ONE, ECUM_STATE_SLEEP, ECUM_STATE_WAKEUP_ONE, ECUM_STATE_WAKEUP_VALIDATION,
 *  ECUM_STATE_WAKEUP_REACTION, ECUM_STATE_WAKEUP_TWO.
 *  If the received parameter is NULL it will return E_NOT_OK.
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    EcuM_State_UT - The value of the internal state variable.
 * \param[in]     void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       Std_ReturnType:
                  E_OK: The out parameter was set successfully.
                  E_NOT_OK: The out parameter was not set.
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern Std_ReturnType EcuM_GetState(EcuM_StateType* EcuM_State_UT);


/*!
 ******************************************************************************
 * \brief
 * Returns pending wake up events which have been set but not yet validated.
 *
 * \details
 * Non Interruptible function
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         non reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       EcuM_WakeupSourceType - all pending wake up events
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern EcuM_WakeupSourceType EcuM_GetPendingWakeupEvents(void);

/*!
 ******************************************************************************
 * \brief
 * Clears all wake up events like pending, validated and expired events.
 *
 * \details
 * If one of the wakeup sources send as parameter was not defined in the configuration
 * and is not known by EcuM an error will be send to DET (ECUM_E_UNKNOWN_WAKEUP_SOURCE)
 * and the wake up events will not be cleared.
 * Non interruptible function
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         non reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     sources - wake up sources for which events will be cleared
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       void
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern void EcuM_ClearWakeupEvent(EcuM_WakeupSourceType sources);

/*!
 ******************************************************************************
 * \brief
 * Returns validated wake up events.
 *
 * \details
 * Non interruptible function
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         non reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       EcuM_WakeupSourceType - all validated wake up events
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern EcuM_WakeupSourceType EcuM_GetValidatedWakeupEvents(void);

/*!
 ******************************************************************************
 * \brief
 * Returns expired wake up events.
 *
 * \details
 * Returns all events that have been set and for which validation has failed.
 * Events which do not need validation are not reported by this function.
 * Non interruptible function
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         non reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       EcuM_WakeupSourceType - expired wake up events
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern EcuM_WakeupSourceType EcuM_GetExpiredWakeupEvents(void);

/*!
 ******************************************************************************
 * \brief
 * Returns sum status of the wake up sources passed in the parameter.
 *
 * \details
 * The sum status shall be computed according to the following algorithm:
 *  If (EcuM_GetValidatedWakeupEvents() AND sources) is not 0 then return ECUM_WKSTATUS_VALIDATED.
 *  If (EcuM_GetPendingWakeupEvents() AND sources) is not 0 then return ECUM_WKSTATUS_PENDING.
 *  If (EcuM_GetExpiredWakeupEvents() AND sources) is not 0 then return ECUM_WKSTATUS_EXPIRED.
 *  Otherwise, return ECUM_WKSTATUS_NONE.
 *  If one of the wakeup sources send as parameter was not defined in the configuration
 *  and is not known by EcuM an error will be send to DET (ECUM_E_UNKNOWN_WAKEUP_SOURCE)
 *  and the returned status will be ECUM_WKSTATUS_NONE.
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     sources - the sources for which the status is returned
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       EcuM_WakeupSourceType - Sum status of all wake up sources passed in the in
 *                parameter.
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern EcuM_WakeupStatusType EcuM_GetStatusOfWakeupSource(EcuM_WakeupSourceType sources);

/*!
 ******************************************************************************
 * \brief
 * Selects a boot target.
 *
 * \details
 *
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     target - the selected boot target
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       Std_ReturnType E_OK: The new boot target was accepted by EcuM
 *                               E_NOT_OK: The new boot target was not accepted by EcuM
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 * For this release the function is not implemented.
 ******************************************************************************/
/*extern Std_ReturnType EcuM_SelectBootTarget(EcuM_BootTargetType target);*/

/*!
 ******************************************************************************
 * \brief
 * Returns the current boot target
 *
 * \details
 *
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    target - the selected boot target
 * \param[in]     void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       Std_ReturnType E_OK: The service always succeeds
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 * For this release the function is not implemented.
 ******************************************************************************/
/*extern Std_ReturnType EcuM_GetBootTarget(EcuM_BootTargetType * target);*/

/*!
 ******************************************************************************
 * \brief
 * This function implements all activities of EcuM while the OS is up and running.
 *
 * \details
 * If the EcuM_MainFunction is called without having called EcuM_Init in advance
 * (so the EcuM is un-initialized) the EcuM_MainFunction will return immediately
 * without performing any functionality and without raising any errors.
 ******************************************************************************
 *
 * \sync
 * \reent
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       void
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern void EcuM_MainFunction(void);

/*!
 ******************************************************************************
 * \brief
 * This function shall be called into infinite loop from main() function so when
 * all tasks are stopped, EcuM can still execute code until Sleep state is entered.
 *
 * \details
 *
 ******************************************************************************
 *
 * \sync
 * \reent
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       void
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
void EcuM_LowPowerManager(void);

/*!
 ******************************************************************************
 * \brief
 * Returns EcuM current mode.
 *
 * \details
 * The returned values could be: ECUM_UNINITIALIZED, ECUM_POST_RUN, ECUM_RUN, ECUM_SHUTDOWN,
 * ECUM_SLEEP, ECUM_STARTUP, ECUM_WAKE_SLEEP.
 *
 ******************************************************************************
 *
 * \sync
 * \reent
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]    void
 * \param[in]     void
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns       EcuM_ModeType - current mode
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 * State ECUM_WAKE_SLEEP is not implemented for this release.
 ******************************************************************************/
extern EcuM_ModeType EcuM_GetCurrentMode(void);

/*!
 ******************************************************************************
 * \brief
 * This callout gives the system designer the chance to intercept the automatic
 * boot behavior and to override the wake up reaction computed from wake up source.
 *
 * \details
 * The possible wake up reactions are ECUM_WKACT_TTII (this wake up reaction is not
 * implemented), ECUM_WKACT_RUN and ECUM_WKACT_SHUTDOWN.
 * If the returned wake up reaction is different of ECUM_WKACT_RUN or
 * ECUM_WKACT_SHUTDOWN then ECUM_E_UNKNOWN_WAKEUP_REACTION will be send to DET
 * and the computed wake up reaction is used.
 *
 *
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         non reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]     void
 * \param[in]      wact - The wake up reaction computed by ECU State Manager
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns        EcuM_WakeupReactionType - The desired wake up reaction
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern EcuM_WakeupReactionType EcuM_OnWakeupReaction(EcuM_WakeupReactionType wact);

#if (ECUM_CURRENT_MODE_CALLOUT == STD_ON)
/*!
 ******************************************************************************
 * \brief
 * This callout is called by the EcuM when current mode is changed.
 *
 * \details
 * Parameter CurrentMode can take one of the values ECUM_UNINITIALIZED, ECUM_POST_RUN,
 * ECUM_RUN, ECUM_SHUTDOWN, ECUM_SLEEP, ECUM_STARTUP, ECUM_WAKE_SLEEP.
 * This function is active when ECUM_CURRENT_MODE_CALLOUT is set to STD_ON.
 * State ECUM_WAKE_SLEEP is not implemented because for this release time triggered
 * increased inoperation (TTII) protocol is not implemented.
 *
 *
 ******************************************************************************
 *
 * \sync          synchronous (function done in one pass)
 * \reent         non reentrant
 *
 * \pre           all must be initialized.
 * \post          process is started
 *
 * \param[out]     void
 * \param[in]      CurrentMode - current EcuM mode
 *
 * \glob_start
 *   \glob_item{in,  U8_GlobA, global variable used}
 *   \glob_item{out, U8_GlobB, global variable used}
 * \glob_end
 *
 * \returns        void
 *
 ******************************************************************************
 *
 * \author        nmicule, PDES-BSW
 * \version       1.0
 * \date          12.01.2018
 *
 ******************************************************************************
 *
 * \par Change history:
 *    \li 12.01.2018, nmicule:
 *       - initial revision
 *
 ******************************************************************************
 *
 * \par Remarks:
 *
 ******************************************************************************/
extern void EcuM_OnModeChange(EcuM_ModeType CurrentMode);
#endif
/* polyspace-end MISRA-C3:5.1 [Justified:Unset] "C99 standard is used to compile, Autosar naming convention." */

extern U32 EcuM_GetRunRequests(void);

#endif   /* ECUM_H_ */

/* %PCMS_HEADER_SUBSTITUTION_START:%
 ******************************************************************************
 * Document Management Information Log (generated by Dimensions CM)
 *
 *  Description:
 *  %PD:%
 *
 *  Used by Baselines:
 *  %PIRB:%
 *
 *  Used by Dimensions CM Projects:
 *  %PIRW:%
 *
 *  Change History:
 *  %PL:%
 *
 * %PCMS_HEADER_SUBSTITUTION_END:%
 */

