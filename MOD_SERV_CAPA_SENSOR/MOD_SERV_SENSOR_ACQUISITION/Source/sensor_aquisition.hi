#ifndef SENSOR_AQUISITION_HI
#define SENSOR_AQUISITION_HI
#ifdef INTEGRATE_FROM_V4
#include "config.h"
#endif
#ifndef INTEGRATE_FROM_V4
#include "Platform_Types.h"
#endif

typedef enum
{
#ifndef VARIANT_1
   SENSOR_LOCK,
#endif
   SENSOR_UNLOCK,
   SENSOR_MAX
 
}EN_SENSOR_ID;

typedef struct
{
    U16 U16_Sensor_SA_Value;
    U16 U16_Sensor_SB_Value;
}SENSOR_MEASURE_VALUE_T;


SENSOR_AQ_EXPORT  SENSOR_MEASURE_VALUE_T S_UnlockRaw[U8_SENSOR_MULTISAMPLING_LOOP+U8_SENSOR_INI_OFFSET];/*buffer to store unlock sensor raw values*/
SENSOR_AQ_EXPORT  SENSOR_MEASURE_VALUE_T S_LockRaw[U8_SENSOR_MULTISAMPLING_LOOP+U8_SENSOR_INI_OFFSET]   ;/*buffer to store lock sensor raw values*/



SENSOR_AQ_EXPORT void Sensor_aquisition_init(void);
SENSOR_AQ_EXPORT void Sensor_Scan_Both(void);
SENSOR_AQ_EXPORT SENSOR_MEASURE_VALUE_T* Get_Sensor_Scan_ER(void);
SENSOR_AQ_EXPORT SENSOR_MEASURE_VALUE_T* Get_Sensor_Scan_VR(void);



/*variable MCVD */
SENSOR_AQ_EXPORT  SENSOR_MEASURE_VALUE_T * AU_sensor_raw_buffer[SENSOR_MAX];/*pointer to buffer to store unlock sensor raw values*/
/*
SENSOR_AQ_EXPORT U8    U8_asm_unlock_shortBurstFlag ;
SENSOR_AQ_EXPORT U8    U8_asm_lock_shortBurstFlag ;
SENSOR_AQ_EXPORT BOOL  BO_PowerUpDone_Flag;
*/
/* not used, should be kept for future usage */
SENSOR_AQ_EXPORT BOOL  BO_asm_SampleAB_Flag ; /* used to switch between sample A to sample B */
SENSOR_AQ_EXPORT BOOL  BO_LF_Signal_detected; /* flag for high/low frequency */

#endif /*SENSOR_AQUISITION_HI*/


